&НаКлиенте
Процедура ОбучитьМодель(Команда)
	ОбучитьМодельНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбучитьМодельНаСервере()
	
	Результат = Неопределено;
	
	
	Данные = ДеревоРешений.РазбитьДанныеНаТренировочныеИТестовые(ВыборкаТитаник(Истина), 0.2, 42);
	
	Предикторы = "Класс,Пол,Возраст,Тариф,КоличествоРодственниковПервогоПорядка,КоличествоРодственниковВторогоПорядка";
	Цель = "Выживание";
	
	ПараметрыМодели = Новый Структура;
	Упрощения = Новый Массив;
	Упрощения.Добавить(ТипУпрощенияДереваРешений.НеУпрощать);
	Упрощения.Добавить(ТипУпрощенияДереваРешений.Упрощать);
	ПараметрыМодели.Вставить("ТипУпрощения", Упрощения);
	ПараметрыМодели.Вставить("МинимальноеКоличествоСлучаев", ДеревоРешений.ПолучитьЧислаВДиапазоне(0, 12, 1));
	ПараметрыМодели.Вставить("МаксимальнаяГлубина", ДеревоРешений.ПолучитьЧислаВДиапазоне(2, 40, 2));
	
	НайденныеПараметры = ДеревоРешений.ПоискПараметровПоСетке(Данные.ТренировочныеДанные, Предикторы, Цель, ПараметрыМодели);
	
	Результат = СтрШаблон("Точность на тренировочных данных (кросс-валидация): %1%%
                           |Лучшие параметры:
                           |- МинимальноеКоличествоСлучаев = %2;
                           |- МаксимальнаяГлубина = %3;
                           |- ТипУпрощения = %4.",
						   Окр(НайденныеПараметры.Точность, 2),
						   НайденныеПараметры.ПараметрыМодели.МинимальноеКоличествоСлучаев,
						   НайденныеПараметры.ПараметрыМодели.МаксимальнаяГлубина,
						   НайденныеПараметры.ПараметрыМодели.ТипУпрощения);
	
						   
	РезультатОбучения = ДеревоРешений.ОбучитьМодельНаДанных(Данные.ТренировочныеДанные, Предикторы, Цель, НайденныеПараметры.ПараметрыМодели);
	АдресМодели = ПоместитьВоВременноеХранилище(РезультатОбучения, УникальныйИдентификатор);
	
	РезультатПрогноза = ДеревоРешений.ВыполнитьПрогноз(Данные.ТестовыеДанные, РезультатОбучения);
	
	Результат = Результат + Символы.ПС + Символы.ПС + СтрШаблон("Точность на тестовых данных: %1%%", Окр(РезультатПрогноза.Точность, 2));
		
КонецПроцедуры


&НаКлиенте
Процедура ПодготовитьФайлДляKaggle(Команда)
	
	ПолучитьФайл(ПодготовитьФайлДляKaggleНаСервере(), "submit.txt", Истина);
	
КонецПроцедуры


&НаСервере
Функция ПодготовитьФайлДляKaggleНаСервере()
	
	Данные = ВыборкаТитаник(Ложь);
	
	РезультатПрогноза = ДеревоРешений.ВыполнитьПрогноз(Данные, ПолучитьИзВременногоХранилища(АдресМодели));
	
	ИмяФайла = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "utf-8");
	ЗаписьТекста.ЗаписатьСтроку("PassengerId,Survived");
	Для Каждого СтрокаТаблицы Из РезультатПрогноза.Прогноз Цикл
		ЗаписьТекста.ЗаписатьСтроку(СтрШаблон("%1,%2", Формат(СтрокаТаблицы.Идентификатор, "ЧРГ=; ЧГ="), ?(СтрокаТаблицы.ВыживаниеПрогнозЗначение = Перечисления.Выживание.Выжил, "1", "0")));
	КонецЦикла;
	ЗаписьТекста.Закрыть();
	
	АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	УдалитьФайлы(ИмяФайла);
	
	Возврат АдресФайла;
	
КонецФункции


Функция ВыборкаТитаник(ТренировочныеДанные = Истина)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Титаник.Идентификатор,
	|	Титаник.Выживание,
	|	Титаник.Класс,
	|	Титаник.Имя,
	|	Титаник.Пол,
	|	Титаник.Возраст,
	|	Титаник.Тариф,
	|	Титаник.НомерБилета,
	|	Титаник.КоличествоРодственниковПервогоПорядка,
	|	Титаник.КоличествоРодственниковВторогоПорядка,
	|	Титаник.ПортПосадки,
	|	Титаник.Каюта
	|ИЗ
	|	РегистрСведений.Титаник КАК Титаник
	|ГДЕ
	|	(&ТренировочныеДанные
	|				И Титаник.Идентификатор < 892
	|			ИЛИ НЕ &ТренировочныеДанные
	|				И Титаник.Идентификатор >= 892)";
	Запрос.УстановитьПараметр("ТренировочныеДанные", ТренировочныеДанные);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Процедура ОбучитьМодель2НаСервере()
	
	Результат = Неопределено;
		
	Данные = ДеревоРешений.РазбитьДанныеНаТренировочныеИТестовые(ПолучитьИсходныеДанные(), 0.2, 42);
	
	Предикторы = "Класс,Пол,Возраст,Тариф,Титул,ПортПосадки,Одиночка,Возраст_Класс";
	Цель = "Выживание";
	
	ПараметрыМодели = Новый Структура;
	Упрощения = Новый Массив;
	Упрощения.Добавить(ТипУпрощенияДереваРешений.НеУпрощать);
	Упрощения.Добавить(ТипУпрощенияДереваРешений.Упрощать);
	ПараметрыМодели.Вставить("ТипУпрощения", Упрощения);
	ПараметрыМодели.Вставить("МинимальноеКоличествоСлучаев", ДеревоРешений.ПолучитьЧислаВДиапазоне(0, 12, 1));
	ПараметрыМодели.Вставить("МаксимальнаяГлубина", ДеревоРешений.ПолучитьЧислаВДиапазоне(2, 40, 2));
	
	НайденныеПараметры = ДеревоРешений.ПоискПараметровПоСетке(Данные.ТренировочныеДанные, Предикторы, Цель, ПараметрыМодели);
	
	Результат = СтрШаблон("Точность на тренировочных данных (кросс-валидация): %1%%
                           |Лучшие параметры:
                           |- МинимальноеКоличествоСлучаев = %2;
                           |- МаксимальнаяГлубина = %3;
                           |- ТипУпрощения = %4.",
						   Окр(НайденныеПараметры.Точность, 2),
						   НайденныеПараметры.ПараметрыМодели.МинимальноеКоличествоСлучаев,
						   НайденныеПараметры.ПараметрыМодели.МаксимальнаяГлубина,
						   НайденныеПараметры.ПараметрыМодели.ТипУпрощения);
	
						   
	РезультатОбучения = ДеревоРешений.ОбучитьМодельНаДанных(Данные.ТренировочныеДанные, Предикторы, Цель, НайденныеПараметры.ПараметрыМодели);
	АдресМодели = ПоместитьВоВременноеХранилище(РезультатОбучения, УникальныйИдентификатор);
	
	РезультатПрогноза = ДеревоРешений.ВыполнитьПрогноз(Данные.ТестовыеДанные, РезультатОбучения);
	
	Результат = Результат + Символы.ПС + Символы.ПС + СтрШаблон("Точность на тестовых данных: %1%%", Окр(РезультатПрогноза.Точность, 2));
	
КонецПроцедуры

Функция ПолучитьИсходныеДанные()
	
	Поток = Обработки.ПримерИспользованияДереваРешений.ПолучитьМакет("train_set").ОткрытьПотокДляЧтения();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(Поток);
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Выживание");
	Данные.Колонки.Добавить("Пол");
	Данные.Колонки.Добавить("Класс");
	Данные.Колонки.Добавить("Возраст");
	Данные.Колонки.Добавить("Титул");
	Данные.Колонки.Добавить("Тариф");
	Данные.Колонки.Добавить("ПортПосадки");
	Данные.Колонки.Добавить("Одиночка");
	Данные.Колонки.Добавить("Возраст_Класс");
	Для Каждого Элемент Из ПрочитатьJSON(ЧтениеJSON, Истина) Цикл
		НоваяСтрока = Данные.Добавить();
		НоваяСтрока.Выживание = Элемент["Survived"];
		НоваяСтрока.Пол = Элемент["Sex"];
		НоваяСтрока.Класс = Элемент["Pclass"];
		НоваяСтрока.Возраст = Элемент["Age"];
		НоваяСтрока.Титул = Элемент["Title"];
		НоваяСтрока.Тариф = Элемент["Fare"];
		НоваяСтрока.ПортПосадки = Элемент["Embarked"];
		НоваяСтрока.Одиночка = Элемент["IsAlone"];
		НоваяСтрока.Возраст_Класс = Элемент["Age*Class"];
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Процедура ОбучитьМодель2(Команда)
	ОбучитьМодель2НаСервере();
КонецПроцедуры



