////////////////////////////////////////////////////////////////////////////////
// Анализ данных и прогнозирование - дерево решений.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ОбучитьМодельНаДанных(Данные, Предикторы, Цель, Параметры = Неопределено) Экспорт
	
	АнализДанных = Новый АнализДанных;
	АнализДанных.ТипАнализа = Тип("АнализДанныхДеревоРешений");
	АнализДанных.ИсточникДанных = Данные;
	
	// Настройка колонок
	КолонкиПредикторов = СтрРазделить(Предикторы, ",", Ложь);
	Для Каждого НастройкаКолонки Из АнализДанных.НастройкаКолонок Цикл
		Если НастройкаКолонки.Имя = Цель Тогда
			НастройкаКолонки.ТипКолонки = ТипКолонкиАнализаДанныхДеревоРешений.Прогнозируемая;
			Продолжить;
		КонецЕсли;
		Если КолонкиПредикторов.Найти(НастройкаКолонки.Имя) <> Неопределено Тогда
			НастройкаКолонки.ТипКолонки = ТипКолонкиАнализаДанныхДеревоРешений.Входная;
		Иначе
			НастройкаКолонки.ТипКолонки = ТипКолонкиАнализаДанныхДеревоРешений.НеИспользуемая;
		КонецЕсли;	
	КонецЦикла;
	
	
	// Параметры
	Если ЗначениеЗаполнено(Параметры) И Параметры.Свойство("МинимальноеКоличествоСлучаев") Тогда
		АнализДанных.Параметры.МинимальноеКоличествоСлучаев.Значение = Параметры.МинимальноеКоличествоСлучаев;
	Иначе
		АнализДанных.Параметры.МинимальноеКоличествоСлучаев.Значение = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры) И Параметры.Свойство("МаксимальнаяГлубина") Тогда
		АнализДанных.Параметры.МаксимальнаяГлубина.Значение = Параметры.МаксимальнаяГлубина;
	Иначе
		АнализДанных.Параметры.МаксимальнаяГлубина.Значение = 1000;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры) И Параметры.Свойство("ТипУпрощения") Тогда
		АнализДанных.Параметры.ТипУпрощения.Значение = Параметры.ТипУпрощения;
	Иначе
		АнализДанных.Параметры.ТипУпрощения.Значение = ТипУпрощенияДереваРешений.Упрощать;
	КонецЕсли;
	
	Возврат АнализДанных.Выполнить();
	
КонецФункции

Функция КроссВалидация(Данные, Предикторы, Цель, Параметры, КоличествоЧастейКроссВалидации = 3) Экспорт
	
	РазмерПорцииДляПроверки = Окр(Данные.Количество() / КоличествоЧастейКроссВалидации);
	
	Оценки = Новый Массив;
	Для НомерЧасти = 1 По КоличествоЧастейКроссВалидации Цикл
		ТренировочныеДанные = Данные.СкопироватьКолонки();
		ТестовыеДанные = Данные.СкопироватьКолонки();
		
		Для Индекс = 0 По Данные.Количество() - 1 Цикл
			Если Индекс > НомерЧасти * РазмерПорцииДляПроверки - РазмерПорцииДляПроверки
				И Индекс < НомерЧасти * РазмерПорцииДляПроверки Тогда
				ЗаполнитьЗначенияСвойств(ТестовыеДанные.Добавить(), Данные[Индекс]);
			Иначе
				ЗаполнитьЗначенияСвойств(ТренировочныеДанные.Добавить(), Данные[Индекс]);
			КонецЕсли;
		КонецЦикла;
		РезультатОбучения = ОбучитьМодельНаДанных(ТренировочныеДанные, Предикторы, Цель, Параметры);
		
		МодельПрогноза = РезультатОбучения.СоздатьМодельПрогноза();
		МодельПрогноза.ИсточникДанных = ТестовыеДанные;
		
		РезультатПрогноза = МодельПрогноза.Выполнить();
		
		КоличествоИстинных = 0;
		Для Каждого СтрокаТаблицы Из РезультатПрогноза Цикл
			Если СтрокаТаблицы[Цель] = СтрокаТаблицы[Цель + "ПрогнозЗначение"] Тогда
				КоличествоИстинных = КоличествоИстинных + 1;
			КонецЕсли;
		КонецЦикла;
		
		Оценки.Добавить(КоличествоИстинных / РезультатПрогноза.Количество() * 100);
	КонецЦикла;	
	
	Сумма = 0;
	Для Каждого Элемент Из Оценки Цикл
		Сумма = Сумма + Элемент;
	КонецЦикла;
	
	Точность = Сумма / Оценки.Количество();
	
	Возврат Точность;
	
КонецФункции

Функция ПоискПараметровПоСетке(Данные, Предикторы, Цель, Параметры, КоличествоЧастейКроссВалидации = 3) Экспорт
	
	Оценки = Новый Массив;
	Комбинации = ПолучитьКомбинацииПараметровДереваРешений(Параметры);
	Для Каждого Комбинация Из Комбинации Цикл
		Оценки.Добавить(КроссВалидация(Данные, Предикторы, Цель, Комбинация, КоличествоЧастейКроссВалидации));
	КонецЦикла;
	
	ЛучшаяОценка = 0;
	ИндексОценки = 0;
	Индекс = 0;
	Для Каждого Оценка Из Оценки Цикл
		Если Оценка > ЛучшаяОценка Тогда
			ЛучшаяОценка = Оценка;
			ИндексОценки = Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Новый Структура("Точность, ПараметрыМодели", ЛучшаяОценка, Комбинации[ИндексОценки]);
	
КонецФункции

Функция ВыполнитьПрогноз(Данные, РезультатОбученияМодели) Экспорт
	
	МодельПрогноза = РезультатОбученияМодели.СоздатьМодельПрогноза();
	МодельПрогноза.ИсточникДанных = Данные;
	
	РезультатПрогноза = МодельПрогноза.Выполнить();
	
	Цель = Неопределено;
	Для Каждого Колонка Из РезультатПрогноза.Колонки Цикл
		Если СтрНайти(Колонка.Имя, "ПрогнозЗначение", НаправлениеПоиска.СКонца) Тогда
			Цель = СтрЗаменить(Колонка.Имя, "ПрогнозЗначение", "");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоИстинных = 0;
	Для Каждого СтрокаТаблицы Из РезультатПрогноза Цикл
		Если СтрокаТаблицы[Цель] = СтрокаТаблицы[Цель + "ПрогнозЗначение"] Тогда
			КоличествоИстинных = КоличествоИстинных + 1;
		КонецЕсли;
	КонецЦикла;
	
	Точность = КоличествоИстинных / РезультатПрогноза.Количество() * 100;
	
	Возврат Новый Структура("Точность,Прогноз", Точность, РезультатПрогноза); 
	
КонецФункции

Функция РазбитьДанныеНаТренировочныеИТестовые(Данные, ДоляТестовыхДанных = 0.2, НачальноеЧисло = Неопределено) Экспорт
	
	Если ТипЗнч(Данные) = Тип("РезультатЗапроса") Тогда
		Данные = Данные.Выгрузить();
	КонецЕсли;
	
	ТренировочныйНабор = Новый Массив;
	ТестовыйНабор = Новый Массив;
	
	Индексы = Новый Массив;
	Для Индекс = 0 По Данные.Количество() - 1 Цикл
		Индексы.Добавить(Индекс);
	КонецЦикла;
	
	КоличествоТестовыхДанных = Данные.Количество() * ДоляТестовыхДанных;
	
	ГСЧ = ПолучитьГенераторСлучайныхЧисел(НачальноеЧисло);

	ВыбраноИндексов = 0;
	Пока Индексы.Количество() > 0 Цикл
		Индекс = ГСЧ.СлучайноеЧисло(0, Индексы.ВГраница());
		ВыбраноИндексов = ВыбраноИндексов + 1;
		Если ВыбраноИндексов > КоличествоТестовыхДанных Тогда
			ТренировочныйНабор.Добавить(Данные[Индексы[Индекс]]);
		Иначе
			ТестовыйНабор.Добавить(Данные[Индексы[Индекс]]);
		КонецЕсли;
		Индексы.Удалить(Индекс);		
	КонецЦикла;
	
	ТренировочныеДанные = Данные.СкопироватьКолонки();
	ТестовыеДанные = Данные.СкопироватьКолонки();
	
	Для Каждого СтрокаТаблицы Из ТренировочныйНабор Цикл
		ЗаполнитьЗначенияСвойств(ТренировочныеДанные.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ТестовыйНабор Цикл
		ЗаполнитьЗначенияСвойств(ТестовыеДанные.Добавить(), СтрокаТаблицы);
	КонецЦикла;
		
	Возврат Новый Структура("ТренировочныеДанные, ТестовыеДанные", ТренировочныеДанные, ТестовыеДанные);
		
КонецФункции

Функция ПолучитьЧислаВДиапазоне(Начало, Конец, Шаг) Экспорт
	
	Числа = Новый Массив;
	ТекущееЧисло = Начало;
	
	Пока ТекущееЧисло <= Конец Цикл
		Числа.Добавить(ТекущееЧисло);
		ТекущееЧисло = ТекущееЧисло + Шаг;
	КонецЦикла;
	
	Возврат Числа;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКомбинацииПараметровДереваРешений(Параметры)
	
	Комбинации = Новый Массив;
	Для Каждого МинимальноеКоличествоСлучаев Из Параметры.МинимальноеКоличествоСлучаев Цикл
		Для Каждого МаксимальнаяГлубина Из Параметры.МаксимальнаяГлубина Цикл
			Для Каждого ТипУпрощения Из Параметры.ТипУпрощения Цикл
				Комбинация = Новый Структура("МинимальноеКоличествоСлучаев, МаксимальнаяГлубина, ТипУпрощения", 
				МинимальноеКоличествоСлучаев, МаксимальнаяГлубина, ТипУпрощения);
				Комбинации.Добавить(Комбинация);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Комбинации;
	
КонецФункции

Функция ПолучитьГенераторСлучайныхЧисел(НачальноеЧисло = Неопределено)
	
	Если ТипЗнч(НачальноеЧисло) = Тип("Число") Тогда
		ГСЧ = Новый ГенераторСлучайныхЧисел(НачальноеЧисло);
	Иначе
		Идентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		СимволыЗамены = "abcdef";
		Для Индекс = 1 По СтрДлина(СимволыЗамены) Цикл
			Идентификатор = СтрЗаменить(Идентификатор, Сред(СимволыЗамены, Индекс, 1), Индекс + 1);
		КонецЦикла;
		
		ГСЧ = Новый ГенераторСлучайныхЧисел(Число(Идентификатор));
	КонецЕсли;
	
	Возврат ГСЧ;
	
КонецФункции

Функция ВыбратьСлучайныеЧислаИзДиапазона(ВерхняяГраница, Количество, НачальноеЧисло = Неопределено)
	
	НаборЧисел = Новый Массив;
	
	ГСЧ = ПолучитьГенераторСлучайныхЧисел(НачальноеЧисло);	
	Пока НаборЧисел.Количество() < Количество Цикл
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, ВерхняяГраница - 1);
		Если НаборЧисел.Найти(СлучайноеЧисло) = Неопределено Тогда
			НаборЧисел.Добавить(СлучайноеЧисло);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НаборЧисел;
		
КонецФункции

#КонецОбласти